From 71fa088cf6fd9062eb6bd936d16f68fa1561711e Mon Sep 17 00:00:00 2001
From: Serhey Popovych <serhe.popovych@gmail.com>
Date: Mon, 29 Apr 2024 17:34:20 +0300
Subject: xt_PRIORITY: Add new module

It is extended version of xt_CLASSIFY that uses xt_MARK xset, and, or
and xor operations to control skb->priority.

Signed-off-by: Serhey Popovych <serhe.popovych@gmail.com>
---
 extensions/Kbuild             |   1 +
 extensions/Mbuild             |   1 +
 extensions/libxt_PRIORITY.c   | 272 ++++++++++++++++++++++++++++++++++++++++++
 extensions/libxt_PRIORITY.man |  29 +++++
 extensions/xt_PRIORITY.c      |  69 +++++++++++
 extensions/xt_PRIORITY.h      |  13 ++
 mconfig                       |   1 +
 7 files changed, 386 insertions(+)
 create mode 100644 extensions/libxt_PRIORITY.c
 create mode 100644 extensions/libxt_PRIORITY.man
 create mode 100644 extensions/xt_PRIORITY.c
 create mode 100644 extensions/xt_PRIORITY.h

diff --git a/extensions/Kbuild b/extensions/Kbuild
index 5031937..0d38787 100644
--- a/extensions/Kbuild
+++ b/extensions/Kbuild
@@ -27,6 +27,7 @@ obj-${build_lscan}       += xt_lscan.o
 obj-${build_pknock}      += pknock/
 obj-${build_psd}         += xt_psd.o
 obj-${build_quota2}      += xt_quota2.o
+obj-${build_PRIORITY}    += xt_PRIORITY.o
 
 -include ${M}/*.Kbuild
 -include ${M}/Kbuild.*
diff --git a/extensions/Mbuild b/extensions/Mbuild
index 462633e..bc746d1 100644
--- a/extensions/Mbuild
+++ b/extensions/Mbuild
@@ -23,3 +23,4 @@ obj-${build_pknock}      += pknock/
 obj-${build_psd}         += libxt_psd.so
 obj-${build_quota2}      += libxt_quota2.so
 obj-${build_gradm}       += libxt_gradm.so
+obj-${build_PRIORITY}    += libxt_PRIORITY.so
diff --git a/extensions/libxt_PRIORITY.c b/extensions/libxt_PRIORITY.c
new file mode 100644
index 0000000..2dbccd5
--- /dev/null
+++ b/extensions/libxt_PRIORITY.c
@@ -0,0 +1,272 @@
+/*
+ *	"PRIORITY" target extension for iptables
+ *	Copyright Â© Serhey Popovych, 2024
+ *
+ *	This program is free software; you can redistribute it and/or
+ *	modify it under the terms of the GNU General Public License; either
+ *	version 2 of the License, or any later version, as published by the
+ *	Free Software Foundation.
+ */
+#include <stdbool.h>
+#include <stdio.h>
+#include <xtables.h>
+#include "xt_PRIORITY.h"
+#include <linux/pkt_sched.h>
+
+enum {
+	/* revision 0 */
+	O_SET_XPRIO	= 0,
+	O_SET_PRIO	= 1,
+	O_AND_PRIO	= 2,
+	O_OR_PRIO	= 3,
+	O_XOR_PRIO	= 4,
+
+	F_SET_XPRIO	= (1 << O_SET_XPRIO),
+	F_SET_PRIO	= (1 << O_SET_PRIO),
+	F_AND_PRIO	= (1 << O_AND_PRIO),
+	F_OR_PRIO	= (1 << O_OR_PRIO),
+	F_XOR_PRIO	= (1 << O_XOR_PRIO),
+
+	F_ANY_PRIO	= F_SET_PRIO | F_AND_PRIO | F_OR_PRIO |
+			  F_XOR_PRIO | F_SET_XPRIO,
+};
+
+static const struct xt_option_entry priority_opts[] = {
+	[O_SET_XPRIO] = {
+		.name	= "set-xprio",
+		.id	= O_SET_XPRIO,
+		.type	= XTTYPE_MARKMASK32,
+		.excl	= F_ANY_PRIO,
+	},
+	[O_SET_PRIO] = {
+		.name	= "set-prio",
+		.id	= O_SET_PRIO,
+		.type	= XTTYPE_STRING,
+		.excl	= F_ANY_PRIO,
+	},
+	[O_AND_PRIO] = {
+		.name	= "and-prio",
+		.id	= O_AND_PRIO,
+		.type	= XTTYPE_UINT32,
+		.excl	= F_ANY_PRIO,
+	},
+	[O_OR_PRIO] = {
+		.name	= "or-prio",
+		.id	= O_OR_PRIO,
+		.type	= XTTYPE_UINT32,
+		.excl	= F_ANY_PRIO,
+	},
+	[O_XOR_PRIO] = {
+		.name	= "xor-prio",
+		.id	= O_XOR_PRIO,
+		.type	= XTTYPE_UINT32,
+		.excl	= F_ANY_PRIO,
+	},
+	XTOPT_TABLEEND,
+};
+
+static const char priority_opts_name[][sizeof("xset")] = {
+	[O_SET_XPRIO] = "xset",
+	[O_SET_PRIO]  = "set",
+	[O_AND_PRIO]  = "and",
+	[O_OR_PRIO]   = "or",
+	[O_XOR_PRIO]  = "xor",
+};
+
+static int priority_parse(const char *s, unsigned int *p)
+{
+	unsigned int maj, min;
+
+	if (sscanf(s, "%x:%x", &maj, &min) != 2 ||
+	    maj > UINT16_MAX ||
+	    min > UINT16_MAX)
+		return -1;
+
+	*p = TC_H_MAKE(maj << 16, min);
+	return 0;
+}
+
+static unsigned int priority_mode(const struct xt_priority_tginfo *info)
+{
+	if (info->priority == 0)
+		return O_AND_PRIO;
+	if (info->priority == info->mask)
+		return O_OR_PRIO;
+	if (info->mask == 0)
+		return O_XOR_PRIO;
+	if (info->mask == ~0U)
+		return O_SET_PRIO;
+
+	return O_SET_XPRIO;
+}
+
+static void PRIORITY_help(void)
+{
+	printf(
+"PRIORITY target options:\n"
+"  --set-prio MAJOR:MINOR    Set skb->priority value (always hexadecimal!)\n"
+"or\n"
+"  --set-prio value[/mask]   Clear bits in mask and OR value into skb->priority\n"
+"  --set-xprio value[/mask]  Clear bits in mask and XOR value into skb->priority\n"
+"  --and-prio bits           Binary AND the skb->priority with bits\n"
+"  --or-prio bits            Binary OR the skb->priority with bits\n"
+"  --xor-prio bits           Binary XOR the skb->priority with bits\n"
+	);
+}
+
+static void
+PRIORITY_show(bool print, const struct xt_entry_target *target)
+{
+	const struct xt_priority_tginfo *info = (const void *) target->data;
+	unsigned int mode = priority_mode(info), priority = info->priority;
+
+	if (print) {
+		printf(" PRIORITY %s ", priority_opts_name[mode]);
+	} else {
+		printf(" --%s ", priority_opts[mode].name);
+	}
+
+	if (mode == O_SET_PRIO) {
+		printf("%x:%x", TC_H_MAJ(priority) >> 16, TC_H_MIN(priority));
+	} else {
+		if (mode == O_AND_PRIO)
+			priority = ~info->mask;
+
+		printf("0x%x", priority);
+
+		if (mode == O_SET_XPRIO)
+			printf("/0x%x", info->mask);
+	}
+}
+
+static void
+PRIORITY_print(const void *ip, const struct xt_entry_target *target,
+	       int numeric)
+{
+	PRIORITY_show(true, target);
+}
+
+static void
+PRIORITY_save(const void *ip, const struct xt_entry_target *target)
+{
+	PRIORITY_show(false, target);
+}
+
+static void PRIORITY_parse(struct xt_option_call *cb)
+{
+	struct xt_priority_tginfo *info = cb->data;
+	const unsigned int revision = (*cb->target)->u.user.revision;
+	unsigned int mode;
+
+	xtables_option_parse(cb);
+	mode = cb->entry->id;
+
+	switch (mode) {
+	case O_SET_XPRIO:
+		info->priority = cb->val.mark;
+		info->mask = cb->val.mask;
+		break;
+	case O_SET_PRIO:
+		if (priority_parse(cb->arg, &info->priority) == 0) {
+			info->mask = ~0U;
+		} else {
+			xtables_parse_mark_mask(cb, &info->priority, &info->mask);
+			info->mask |= info->priority;
+		}
+		break;
+	case O_AND_PRIO:
+		info->priority = 0;
+		info->mask = ~cb->val.u32;
+		break;
+	case O_OR_PRIO:
+		info->priority = info->mask = cb->val.u32;
+		break;
+	case O_XOR_PRIO:
+		info->priority = cb->val.u32;
+		info->mask = 0;
+		break;
+	default:
+		xtables_error(PARAMETER_PROBLEM,
+			      "libxt_PRIORITY.%u does not support --%s",
+			      revision,
+			      priority_opts[mode].name);
+	}
+}
+
+static void PRIORITY_check(struct xt_fcheck_call *cb)
+{
+	if (!(cb->xflags & F_ANY_PRIO)) {
+		xtables_error(PARAMETER_PROBLEM,
+			      "PRIORITY: One of the --set-xprio, "
+			      "--{and,or,xor,set}-prio options is required");
+	}
+}
+
+static int PRIORITY_xlate(struct xt_xlate *xl,
+			  const struct xt_xlate_tg_params *params)
+{
+	const struct xt_priority_tginfo *info =
+		(const void *) params->target->data;
+	unsigned int mode = priority_mode(info), priority = info->priority;
+
+	xt_xlate_add(xl, "meta priority %s", "set ");
+
+	if (mode != O_SET_PRIO)
+		xt_xlate_add(xl, "meta priority %s", "");
+
+	switch (mode) {
+	case O_SET_XPRIO:
+		xt_xlate_add(xl, "and 0x%x xor 0x%x", ~info->mask, priority);
+		break;
+	case O_SET_PRIO:
+		/* from xt_CLASSIFY */
+		switch (priority) {
+		case TC_H_ROOT:
+			xt_xlate_add(xl, "root");
+			break;
+		case TC_H_UNSPEC:
+			xt_xlate_add(xl, "none");
+			break;
+		default:
+			xt_xlate_add(xl, "%0x:%0x", TC_H_MAJ(priority) >> 16,
+				     TC_H_MIN(priority));
+			break;
+		}
+		break;
+	case O_AND_PRIO:
+		xt_xlate_add(xl, "%s 0x%x",
+			     priority_opts_name[O_AND_PRIO], ~info->mask);
+		break;
+	case O_OR_PRIO:
+		xt_xlate_add(xl, "%s 0x%x",
+			     priority_opts_name[O_OR_PRIO], priority);
+		break;
+	case O_XOR_PRIO:
+		xt_xlate_add(xl, "%s 0x%x",
+			     priority_opts_name[O_XOR_PRIO], priority);
+		break;
+	}
+
+	return 1;
+}
+
+static struct xtables_target priority_tg_reg = {
+	.family		= NFPROTO_UNSPEC,
+	.name		= "PRIORITY",
+	.version	= XTABLES_VERSION,
+	.revision	= 0,
+	.size		= XT_ALIGN(sizeof(struct xt_priority_tginfo)),
+	.userspacesize	= XT_ALIGN(sizeof(struct xt_priority_tginfo)),
+	.help		= PRIORITY_help,
+	.print		= PRIORITY_print,
+	.save		= PRIORITY_save,
+	.x6_parse	= PRIORITY_parse,
+	.x6_fcheck	= PRIORITY_check,
+	.x6_options	= priority_opts,
+	.xlate		= PRIORITY_xlate,
+};
+
+static void _init(void)
+{
+	xtables_register_target(&priority_tg_reg);
+}
diff --git a/extensions/libxt_PRIORITY.man b/extensions/libxt_PRIORITY.man
new file mode 100644
index 0000000..516a109
--- /dev/null
+++ b/extensions/libxt_PRIORITY.man
@@ -0,0 +1,29 @@
+This module allows you to set/modify the skb\->priority value (and thus classify the
+packet into a specific class of qdisc). It is extended version of CLASSIFY target
+with capabilities to modify skb\->priority in the same way as skb\->nfmark in MARK
+target.
+.TP
+\fB\-\-set\-xprio\fP \fIvalue\fP[\fB/\fP\fImask\fP]
+Zeroes out the bits given by \fImask\fP and XORs \fIvalue\fP into the TC packet
+priority. If \fImask\fP is omitted, 0xFFFFFFFF is assumed.
+.TP
+\fB\-\-set\-prio\fP \fImajor\fP\fB:\fP\fIminor\fP or \fIvalue\fP[\fB/\fP\fImask\fP]
+Two form of arguments are supported at the moment. The first one
+uses the major and minor class to set value. Values are always
+interpreted as hexadecimal even if no 0x prefix is given. The second one
+zeroes out the bits given by \fImask\fP and ORs \fIvalue\fP into the TC packet
+priority. If \fImask\fP is omitted, 0xFFFFFFFF is assumed.
+.PP
+The following mnemonics are available:
+.TP
+\fB\-\-and\-prio\fP \fIbits\fP
+Binary AND the TC packet priority with \fIbits\fP. (Mnemonic for \fB\-\-set\-xprio
+0/\fP\fIinvbits\fP, where \fIinvbits\fP is the binary negation of \fIbits\fP.)
+.TP
+\fB\-\-or\-prio\fP \fIbits\fP
+Binary OR the TC packet priority with \fIbits\fP. (Mnemonic for \fB\-\-set\-xprio\fP
+\fIbits\fP\fB/\fP\fIbits\fP.)
+.TP
+\fB\-\-xor\-prio\fP \fIbits\fP
+Binary XOR the TC packet priority with \fIbits\fP. (Mnemonic for \fB\-\-set\-xprio\fP
+\fIbits\fP\fB/0\fP.)
diff --git a/extensions/xt_PRIORITY.c b/extensions/xt_PRIORITY.c
new file mode 100644
index 0000000..01a433e
--- /dev/null
+++ b/extensions/xt_PRIORITY.c
@@ -0,0 +1,69 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * This is a module which is used for setting the skb->priority field
+ * of an skb for qdisc classification.
+ */
+
+/* (C) 2024 Serhey Popovych <serhe.popovych@gmail.com>
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/ip.h>
+#include <net/checksum.h>
+#include <linux/netfilter_ipv4.h>
+#include <linux/netfilter_ipv6.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_arp.h>
+#include "xt_PRIORITY.h"
+
+MODULE_AUTHOR("Serhey Popovych <serhe.popovych@gmail.com");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("Xtables: Qdisc classification v2");
+MODULE_ALIAS("ipt_PRIORITY");
+MODULE_ALIAS("ip6t_PRIORITY");
+MODULE_ALIAS("arpt_PRIORITY");
+
+static unsigned int
+priority_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	const struct xt_priority_tginfo *clinfo = par->targinfo;
+
+	skb->priority = (skb->priority & ~clinfo->mask) ^ clinfo->priority;
+	return XT_CONTINUE;
+}
+
+static struct xt_target priority_tg_reg[] __read_mostly = {
+	{
+		.name       = "PRIORITY",
+		.revision   = 0,
+		.family     = NFPROTO_UNSPEC,
+		.hooks      = (1 << NF_INET_LOCAL_OUT) | (1 << NF_INET_FORWARD) |
+		              (1 << NF_INET_POST_ROUTING),
+		.target     = priority_tg,
+		.targetsize = sizeof(struct xt_priority_tginfo),
+		.me         = THIS_MODULE,
+	},
+	{
+		.name       = "PRIORITY",
+		.revision   = 0,
+		.family     = NFPROTO_ARP,
+		.hooks      = (1 << NF_ARP_OUT) | (1 << NF_ARP_FORWARD),
+		.target     = priority_tg,
+		.targetsize = sizeof(struct xt_priority_tginfo),
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init priority_tg_init(void)
+{
+	return xt_register_targets(priority_tg_reg, ARRAY_SIZE(priority_tg_reg));
+}
+
+static void __exit priority_tg_exit(void)
+{
+	xt_unregister_targets(priority_tg_reg, ARRAY_SIZE(priority_tg_reg));
+}
+
+module_init(priority_tg_init);
+module_exit(priority_tg_exit);
diff --git a/extensions/xt_PRIORITY.h b/extensions/xt_PRIORITY.h
new file mode 100644
index 0000000..dccf01f
--- /dev/null
+++ b/extensions/xt_PRIORITY.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+#ifndef _XT_PRIORITY_H
+#define _XT_PRIORITY_H
+
+#include <linux/types.h>
+
+/* revision 0 */
+struct xt_priority_tginfo {
+	__u32 priority;
+	__u32 mask;
+};
+
+#endif /*_XT_PRIORITY_H */
diff --git a/mconfig b/mconfig
index 2434ac9..51e61ee 100644
--- a/mconfig
+++ b/mconfig
@@ -23,3 +23,4 @@ build_lscan=m
 build_pknock=m
 build_psd=m
 build_quota2=m
+build_PRIORITY=m
-- 
1.8.3.1

